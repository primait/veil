#!/usr/bin/env bash

# script exit when a command fails
set -o errexit
# catch a command error in pipe execution
set -o pipefail
# exit when try to use undeclared variables
# set -o nounset
# print and expand each command to stdout before executing it
set -o xtrace

if [ $# -eq 0 ]; then
  echo "Missing required argument: environment"
  exit 1
fi

export ENV=$1
export AWS_DEFAULT_REGION="eu-west-1"
export VERSION="${DRONE_TAG:-$DRONE_COMMIT_SHA}"

version=$(grep -m1 '^version' Cargo.toml | cut -d'"' -f2)

if [[ "$DRONE_TAG" != "$version" ]]; then
  echo "Package version $version does not match release version $DRONE_TAG"
  exit 1
fi

git checkout .
cargo login "$CARGO_AUTH_KEY"

cargo publish --all-features --package veil-macros

# We have to do this to ensure that the package is published even if the registry is out of sync.
# veil depends on veil-macros, so this is published first, but the registry doesn't know about it yet, so the publish fails.
# This loop checks for the package to be available, and retries until it is.
#
# I evaluated loads of other workarounds, namely cargo subcommands that claim to fix this issue, but for some reason, every
# single one of these tools does extra stuff on top of fixing the issue, such as generating changelogs, bumping versions, etc.
# and for whatever reason, you can't turn these off?! Very weird.
#
# Relevant issue: https://github.com/rust-lang/cargo/issues/9507
# Relevant fix PR: https://github.com/rust-lang/cargo/pull/11062
current_remote_version=''
while [ "$DRONE_TAG" != "$current_remote_version" ]
do
  current_remote_version=$(curl "https://crates.io/api/v1/crates/veil-macros/$DRONE_TAG" -s | jq '.version .num')
  sleep 3
done

cargo publish --all-features --package veil
